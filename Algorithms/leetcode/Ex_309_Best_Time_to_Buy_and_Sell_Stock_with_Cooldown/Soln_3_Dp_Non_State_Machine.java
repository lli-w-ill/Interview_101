package Algorithms.leetcode.Ex_309_Best_Time_to_Buy_and_Sell_Stock_with_Cooldown;

class Solution_3 {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n <= 1) {
            return 0;
        }
        // dp[i][0]: 表示最大利润，在状态————「不持股且在第i天没有卖出」（这个有点不好理解，话说都不持股了怎么卖出？答：「不持股」这个状态可以理解成当天的最最最终状态（也就是23:59分时的状态），如果第i天白天是持股的，我可以在当天上午或下午卖出啊，等到23:59时就是不持股状态了。而dp[i][0]表示的是前一天到当天跨天0:00分的时候我压根就没有股票，而且当天从0:00分到这天（第i天）的末尾23:59分期间我也没卖股票的这种「不持有」状态）
        // dp[i][1]: 表示最大利润，在状态————「持股」状态
        // dp[i][2]: 表示最大利润，在状态————「不持股但是在第i天卖出了」（对照着dp[i][0]的解释，表示在第i-1天到第i天跨天的0:00分时我是持股的状态，但是从第i天0:00～23:59分中间的某个时间我卖了，致使在这一天最最最终状态23:59时，我是「不持股」状态）
        int[][] dp = new int[n][3];
        // base case
        dp[0][0] = 0;               // 压根就没有股票，且第0天什么都没干 
        dp[0][1] = -1 * prices[0];  // 在第0天买入股票
        dp[0][2] = 0;               // 可以「强行」理解成“在第0天买入又卖出”，但是不是完全符合dp[0][2]的意思

        for (int i = 1; i < n; i++) {
            // 更新「第i天不持股且第i天没有卖出」状态下的最多利润
            //                  dp[i-1][0]: 第i-1天也不持股，且第i-1天也没买股票（因为压根第i-1天0:00时就没股票）
            //                              dp[i-1][2]: i-1天不持股，但是第i-1天卖出了股票
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][2]);
            // 更新「第i天持股」状态下的最多利润
            //                  dp[i-1][1]: 第i-1天就是持股的，并且没有卖出，在第i天23:59之前也没有卖出，所以今天「持有状态」是继承昨天的「持有状态」
            //                              dp[i-1][0] - prices[i]: 第i-1天处于「不持有状态」，且这个「不持有状态」**不是因为**在第i-1天卖了股票而获得「不持有」，而是压根第i-1天0:00分是就没有股票，而当天（i-1天）又什么都没干，最终获得「不持有状态」（这里就保证了一天的cooldown，因为如果第i-1天的不持有是因为卖了股票而获得的不持有状态，今天（第i天）就不能买入
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i]);
            // 更新「第i天不持股且第i天卖出」状态下的最多利润
            //         dp[i-1][1] + prices[i]: 要想今天卖出，必须保证i-1天是持股的，所以今天的最终收益=昨天持股的最大收益 + 今天卖股票获得的收益
            dp[i][2] = dp[i-1][1] + prices[i];
        }
        // 比较最后一天不持有时的最大利润
        // 这里不算上「最后一天是持股状态」是因为：如果第i天是持有股票状态，那么一定不可能比不持有还赚更多的钱。因为我已经花了买股票的钱，但是到最终我没卖，就算最后一天卖股票时的价格比买股票时的更低，但是如果我选择在最后一天卖了，至少还能回点钱（即使整个算下来还是亏的）
        return Math.max(dp[n-1][0], dp[n-1][2]);
    }
}

// 参考题解（强烈推荐）：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/fei-zhuang-tai-ji-de-dpjiang-jie-chao-ji-tong-su-y/

